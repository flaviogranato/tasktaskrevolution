name: QA Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: rustfmt, clippy
        
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Run tests
      run: cargo test --verbose
      
    - name: Run clippy
      run: cargo clippy -- -D warnings
      
    - name: Check formatting
      run: cargo fmt -- --check
      
    - name: Install cargo-audit
      run: cargo install cargo-audit
      
    - name: Security audit
      run: cargo audit
      continue-on-error: true
      
    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin
      
    - name: Generate test coverage
      run: cargo tarpaulin --out Html --output-dir coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/tarpaulin-report.html
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  navigation-tests:
    name: Navigation & HTML Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        
    - name: Build TTR
      run: cargo build
      
    - name: Make scripts executable
      run: chmod +x test_navigation.sh qa_complete.sh
      
    - name: Run navigation tests
      run: ./test_navigation.sh
      
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install html-validate
      run: npm install -g html-validate
      
    - name: Build HTML site
      run: |
        mkdir -p /tmp/teste
        cd /tmp/teste
        eval "../../target/debug/ttr init --name \"Test Manager\" --email \"test@example.com\" --company-name \"Test Company\""
        eval "../../target/debug/ttr create company --name \"Tech Corp\" --code \"TECH-CORP\" --description \"Technology company\""
        eval "../../target/debug/ttr create resource \"John Doe\" \"Developer\" --company-code \"TECH-CORP\""
        eval "../../target/debug/ttr create project \"Web App\" \"Web application project\" --company-code \"TECH-CORP\""
        eval "../../target/debug/ttr create task --name \"Setup Environment\" --description \"Setup development environment\" --start-date \"2024-01-15\" --due-date \"2024-01-22\" --project-code \"proj-1\" --company-code \"TECH-CORP\""
        eval "../../target/debug/ttr build"
        
    - name: Validate HTML
      run: html-validate /tmp/teste/public/**/*.html
      continue-on-error: true
      
    - name: Upload HTML validation results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: html-validation-results
        path: /tmp/teste/public/

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: code-quality
    if: github.event_name == 'schedule' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        
    - name: Build TTR
      run: cargo build --release
      
    - name: Install Apache Bench
      run: sudo apt-get update && sudo apt-get install -y apache2-utils
      
    - name: Build test site
      run: |
        mkdir -p /tmp/perf-test
        cd /tmp/perf-test
        eval "../../target/release/ttr init --name \"Test Manager\" --email \"test@example.com\" --company-name \"Test Company\""
        eval "../../target/release/ttr create company --name \"Tech Corp\" --code \"TECH-CORP\" --description \"Technology company\""
        eval "../../target/release/ttr create resource \"John Doe\" \"Developer\" --company-code \"TECH-CORP\""
        eval "../../target/release/ttr create project \"Web App\" \"Web application project\" --company-code \"TECH-CORP\""
        eval "../../target/release/ttr create task --name \"Setup Environment\" --description \"Setup development environment\" --start-date \"2024-01-15\" --due-date \"2024-01-22\" --project-code \"proj-1\" --company-code \"TECH-CORP\""
        eval "../../target/release/ttr build"
        
    - name: Start HTTP server
      run: |
        cd /tmp/perf-test/public
        python3 -m http.server 8000 &
        sleep 5
        
    - name: Run performance tests
      run: |
        ab -n 1000 -c 10 http://localhost:8000/ > performance_results.txt
        cat performance_results.txt
        
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: performance_results.txt

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: code-quality
    if: github.event_name == 'schedule' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install semgrep
      run: pip install semgrep
      
    - name: Run security scan
      run: semgrep --config=auto --lang=rust src/
      continue-on-error: true
      
    - name: Upload security results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: .semgrep/

  qa-summary:
    name: QA Summary
    runs-on: ubuntu-latest
    needs: [code-quality, navigation-tests]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        
    - name: Build TTR
      run: cargo build
      
    - name: Make scripts executable
      run: chmod +x qa_complete.sh
      
    - name: Run complete QA pipeline
      run: ./qa_complete.sh
      continue-on-error: true
      
    - name: Upload QA reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: qa-reports
        path: qa_reports/
        
    - name: Comment PR with QA results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            const summaryPath = path.join('qa_reports', 'qa_summary_*.md');
            const files = fs.readdirSync('qa_reports').filter(f => f.startsWith('qa_summary_'));
            
            if (files.length > 0) {
              const summary = fs.readFileSync(path.join('qa_reports', files[0]), 'utf8');
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## üîç QA Pipeline Results\n\n${summary}`
              });
            }
          } catch (error) {
            console.log('Could not read QA summary:', error);
          }
