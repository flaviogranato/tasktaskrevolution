name: Trunk-Based CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUST_TEST_THREADS: 1

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Format check
        run: cargo fmt --all -- --check

      - name: Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Test
        run: |
          echo "Running tests with verbose output..."
          echo "Rust version: $(rustc --version)"
          echo "Cargo version: $(cargo --version)"
          echo "Available memory: $(free -h)"
          echo "Disk space: $(df -h)"
          cargo test --all-features --verbose -- --nocapture
          echo "Test command completed with exit code: $?"

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build
        run: cargo build --release

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ttr-linux-amd64
          path: target/release/ttr
          retention-days: 30

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ttr-linux-amd64
          path: ./dist/

      - name: Make binary executable
        run: chmod +x ./dist/ttr

      - name: Get version from Cargo.toml
        id: version
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | cut -d '"' -f 2)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.tag }}
          body: |
            ## ðŸš€ Task Task Revolution ${{ steps.version.outputs.version }}
            
            ### ðŸ“¦ BinÃ¡rio Linux AMD64
            - **Arquivo**: `ttr-linux-amd64`
            - **Plataforma**: Linux x86_64
            - **Arquitetura**: AMD64
            
            ### ðŸ”§ Como usar
            1. Baixe o arquivo `ttr-linux-amd64`
            2. Renomeie para `ttr`
            3. Torne executÃ¡vel: `chmod +x ttr`
            4. Mova para PATH: `sudo mv ttr /usr/local/bin/`
            
            ### âœ¨ Funcionalidades desta versÃ£o
            - Sistema de busca avanÃ§ado
            - Engine de consultas
            - Completions para shell
            - ValidaÃ§Ã£o de dados robusta
            - DetecÃ§Ã£o de conflitos de recursos
            - GeraÃ§Ã£o de relatÃ³rios Gantt
            
            ### ðŸ“‹ VerificaÃ§Ã£o
            ```bash
            ttr --version
            ttr --help
            ```
          files: ./dist/ttr
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
