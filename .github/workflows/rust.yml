name: Trunk-Based CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUST_TEST_THREADS: 1

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Format check
        run: cargo fmt --all -- --check

      - name: Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Test
        run: |
          echo "Running tests with verbose output..."
          echo "Rust version: $(rustc --version)"
          echo "Cargo version: $(cargo --version)"
          echo "Available memory: $(free -h)"
          echo "Disk space: $(df -h)"
          cargo test --all-features --verbose -- --nocapture
          echo "Test command completed with exit code: $?"

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build
        run: cargo build --release

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ttr-linux-amd64
          path: target/release/ttr
          retention-days: 30

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for tags

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ttr-linux-amd64
          path: ./dist/

      - name: Make binary executable
        run: chmod +x ./dist/ttr

      - name: Get version and commit info
        id: version
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | cut -d '"' -f 2)
          COMMIT_SHA=$(git rev-parse --short HEAD)
          TIMESTAMP=$(date '+%Y%m%d-%H%M%S')
          RELEASE_NAME="v${VERSION}-${COMMIT_SHA}-${TIMESTAMP}"
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.release_name }}
          name: Release ${{ steps.version.outputs.release_name }}
          body: |
            ## 🚀 Task Task Revolution ${{ steps.version.outputs.version }}
            
            **Commit**: `${{ steps.version.outputs.commit_sha }}`  
            **Build**: $(date '+%Y-%m-%d %H:%M:%S UTC')
            
            ### 📦 Download Binário Linux AMD64
            
            **Arquivo**: `ttr-linux-amd64`  
            **Plataforma**: Linux x86_64 (AMD64)  
            **Build**: Release otimizado  
            
            ### 🔧 Instalação Rápida
            ```bash
            # 1. Baixe o arquivo abaixo
            # 2. Renomeie e torne executável
            mv ttr-linux-amd64 ttr
            chmod +x ttr
            
            # 3. Instale no sistema
            sudo mv ttr /usr/local/bin/
            
            # 4. Verifique a instalação
            ttr --version
            ```
            
            ### ✨ Funcionalidades desta versão
            - 🔍 Sistema de busca avançado
            - 📊 Engine de consultas
            - 🐚 Completions para shell
            - ✅ Validação de dados robusta
            - ⚠️ Detecção de conflitos de recursos
            - 📈 Geração de relatórios Gantt
            
            ### 📋 Comandos Principais
            ```bash
            ttr --help           # Ajuda geral
            ttr search --help    # Sistema de busca
            ttr query --help     # Engine de consultas
            ttr completions --help  # Completions
            ```
          files: ./dist/ttr
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
