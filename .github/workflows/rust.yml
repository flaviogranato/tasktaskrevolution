name: Trunk-Based CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUST_TEST_THREADS: 1

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Format check
        run: cargo fmt --all -- --check

      - name: Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Test
        run: |
          echo "Running tests with verbose output..."
          echo "Rust version: $(rustc --version)"
          echo "Cargo version: $(cargo --version)"
          echo "Available memory: $(free -h)"
          echo "Disk space: $(df -h)"
          cargo test --all-features --verbose -- --nocapture
          echo "Test command completed with exit code: $?"

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build
        run: cargo build --release

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ttr-linux-amd64
          path: target/release/ttr
          retention-days: 30

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ttr-linux-amd64
          path: ./dist/

      - name: Make binary executable
        run: chmod +x ./dist/ttr

      - name: Ensure tag exists on remote
        run: |
          TAG="${{ steps.version.outputs.tag }}"
          echo "Ensuring tag $TAG exists on remote repository..."
          
          # Check if tag exists locally
          if git tag -l | grep -q "^$TAG$"; then
            echo "Tag $TAG exists locally"
            # Push tag to remote if it doesn't exist there
            if ! git ls-remote --tags origin | grep -q "refs/tags/$TAG$"; then
              echo "Pushing tag $TAG to remote..."
              git push origin "$TAG"
            else
              echo "Tag $TAG already exists on remote"
            fi
          else
            echo "Tag $TAG does not exist locally, cannot create release"
            exit 1
          fi

      - name: Get version and tag info
        id: version
        run: |
          VERSION=$(grep '^version = ' Cargo.toml | cut -d '"' -f 2)
          TAG="v$VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          
          # Get tag message if tag exists
          if git tag -l | grep -q "^$TAG$"; then
            TAG_MESSAGE=$(git tag -l --format='%(contents)' $TAG)
            echo "tag_message<<EOF" >> $GITHUB_OUTPUT
            echo "$TAG_MESSAGE" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "tag_message=Release $TAG" >> $GITHUB_OUTPUT
          fi

      - name: Check if release already exists
        id: check_release
        run: |
          TAG="${{ steps.version.outputs.tag }}"
          echo "Checking if release $TAG exists..."
          
          # Check if tag exists locally
          if git tag -l | grep -q "^$TAG$"; then
            echo "Tag $TAG exists locally"
          else
            echo "Tag $TAG does not exist locally"
          fi
          
          # Check if release exists on GitHub
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Release $TAG already exists on GitHub, skipping creation"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Release $TAG does not exist on GitHub, will create"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        if: steps.check_release.outputs.exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.tag }}
          body: |
            ${{ steps.version.outputs.tag_message }}
            
            ---
            
            ## üì¶ Download Bin√°rio Linux AMD64
            
            ### üîß Instala√ß√£o
            1. Baixe o arquivo `ttr-linux-amd64` abaixo
            2. Renomeie para `ttr`: `mv ttr-linux-amd64 ttr`
            3. Torne execut√°vel: `chmod +x ttr`
            4. Instale no sistema: `sudo mv ttr /usr/local/bin/`
            
            ### üìã Verifica√ß√£o da Instala√ß√£o
            ```bash
            ttr --version
            ttr --help
            ```
            
            ### üèóÔ∏è Build Info
            - **Plataforma**: Linux x86_64 (AMD64)
            - **Arquitetura**: x86_64-unknown-linux-gnu
            - **Build**: Release (otimizado)
            - **Data**: $(date '+%Y-%m-%d %H:%M:%S UTC')
          files: ./dist/ttr
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Skip Release (already exists)
        if: steps.check_release.outputs.exists == 'true'
        run: |
          echo "Release ${{ steps.version.outputs.tag }} already exists, skipping creation"
          echo "To update the release, delete it first and re-run the workflow"
